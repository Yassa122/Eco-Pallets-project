export declare const SEPARATOR = "|";
export declare const XML_ELEMENT_REGEXP: RegExp;
export declare const CLASSES: {
    readonly '[object Arguments]': 0;
    readonly '[object Array]': 1;
    readonly '[object ArrayBuffer]': 2;
    readonly '[object AsyncFunction]': 3;
    readonly '[object AsyncGeneratorFunction]': 4;
    readonly '[object BigInt]': 5;
    readonly '[object BigInt64Array]': 6;
    readonly '[object BigUint64Array]': 7;
    readonly '[object Boolean]': 8;
    readonly '[object DataView]': 9;
    readonly '[object Date]': 10;
    readonly '[object DocumentFragment]': 11;
    readonly '[object Error]': 12;
    readonly '[object Event]': 13;
    readonly '[object Float32Array]': 14;
    readonly '[object Float64Array]': 15;
    readonly '[object Function]': 16;
    readonly '[object Generator]': 17;
    readonly '[object GeneratorFunction]': 18;
    readonly '[object Int8Array]': 19;
    readonly '[object Int16Array]': 20;
    readonly '[object Map]': 21;
    readonly '[object Number]': 22;
    readonly '[object Object]': 23;
    readonly '[object Promise]': 24;
    readonly '[object RegExp]': 25;
    readonly '[object Set]': 26;
    readonly '[object SharedArrayBuffer]': 27;
    readonly '[object String]': 28;
    readonly '[object Uint8Array]': 29;
    readonly '[object Uint8ClampedArray]': 30;
    readonly '[object Uint16Array]': 31;
    readonly '[object Uint32Array]': 32;
    readonly '[object WeakMap]': 33;
    readonly '[object WeakRef]': 34;
    readonly '[object WeakSet]': 35;
    readonly CUSTOM: 36;
    readonly ELEMENT: 37;
};
export type Class = keyof typeof CLASSES;
export declare const ARRAY_LIKE_CLASSES: {
    readonly '[object Arguments]': 1;
    readonly '[object Array]': 2;
};
export type ArrayLikeClass = keyof typeof ARRAY_LIKE_CLASSES;
export declare const NON_ENUMERABLE_CLASSES: {
    readonly '[object Generator]': 1;
    readonly '[object Promise]': 2;
    readonly '[object WeakMap]': 3;
    readonly '[object WeakRef]': 4;
    readonly '[object WeakSet]': 5;
};
export type NonEnumerableClass = keyof typeof NON_ENUMERABLE_CLASSES;
export declare const PRIMITIVE_WRAPPER_CLASSES: {
    readonly '[object AsyncFunction]': 1;
    readonly '[object AsyncGeneratorFunction]': 2;
    readonly '[object Boolean]': 3;
    readonly '[object Function]': 4;
    readonly '[object GeneratorFunction]': 5;
    readonly '[object Number]': 6;
    readonly '[object String]': 7;
};
export type PrimitiveWrapperClass = keyof typeof PRIMITIVE_WRAPPER_CLASSES;
export declare const TYPED_ARRAY_CLASSES: {
    readonly '[object BigInt64Array]': 1;
    readonly '[object BigUint64Array]': 2;
    readonly '[object Float32Array]': 3;
    readonly '[object Float64Array]': 4;
    readonly '[object Int8Array]': 5;
    readonly '[object Int16Array]': 6;
    readonly '[object Uint8Array]': 7;
    readonly '[object Uint8ClampedArray]': 8;
    readonly '[object Uint16Array]': 9;
    readonly '[object Uint32Array]': 10;
};
export type TypedArrayClass = keyof typeof TYPED_ARRAY_CLASSES;
export declare const RECURSIVE_CLASSES: {
    readonly '[object Arguments]': 1;
    readonly '[object Array]': 2;
    readonly '[object ArrayBuffer]': 3;
    readonly '[object BigInt64Array]': 4;
    readonly '[object BigUint64Array]': 5;
    readonly '[object DataView]': 6;
    readonly '[object Float32Array]': 7;
    readonly '[object Float64Array]': 8;
    readonly '[object Int8Array]': 9;
    readonly '[object Int16Array]': 10;
    readonly '[object Map]': 11;
    readonly '[object Object]': 12;
    readonly '[object Set]': 13;
    readonly '[object SharedArrayBuffer]': 14;
    readonly '[object Uint8Array]': 15;
    readonly '[object Uint8ClampedArray]': 16;
    readonly '[object Uint16Array]': 17;
    readonly '[object Uint32Array]': 18;
    readonly CUSTOM: 19;
};
export type RecursiveClass = keyof typeof RECURSIVE_CLASSES;
export declare const HASHABLE_TYPES: {
    readonly bigint: "i";
    readonly boolean: "b";
    readonly empty: "e";
    readonly function: "g";
    readonly number: "n";
    readonly object: "o";
    readonly string: "s";
    readonly symbol: "s";
};
export type HashableType = keyof typeof HASHABLE_TYPES;
